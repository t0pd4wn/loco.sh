#!/bin/bash
#-------------------------------------------------------------------------------
# .loco_startup | Effort to provide startup custom commands
#-------------------------------------------------------------------------------

# Below scripts provide functions to trigger commands, when terminal is open.
# Previously, writing a persistent ENV variable was possible
# Previously, writing a file in the system through .profile at startup was possible (as in POSIX compliance), which is limited in VMs
# Nowadays, the inital check is made upon VPN connection

# To set this up properly
# 1. start your vpn connection
# 2. launch `ip addr show` in the terminal
# 3. check for your vpn connection name (usually last in the list ("tun0" for OpenVPN)) 
# 4. in `is_started` change "VPN_identifier" for this name
# 5. in `wireguard_connect` or `openvpn_connect` change "VPN_domains" for your VPN files prefixes (e.g. jp, uk...)
# 6. on ubuntu, open the "startup application preferences" and add your terminal ("gnome-terminal" for example)
# From now on, accessing your system will open the terminal and connect you to your VPN.

#######################################
# Called from .bashrc ; checks if VPN is connected
# note : change "VPN_identifier" for your VPN identifier 
# (something that distinguishes it in `ip addr show`)
#######################################
is_started(){
  local vpn_identifier="VPN_identifier"
  local test=$(ip addr show | grep ${vpn_identifier})
  if [[ -n ${test} ]] ; then
    # started
    shell_start
  else
    # not started
    session_start
    shell_start
  fi
}

#######################################
# Called first time terminal is opened
# !if a VPN connection is set properly!
#######################################
session_start(){
  echo -e "Installed with loco.sh \U1f335. You can edit this text in ~/.loco_startup"
  # uncomment below lines depending on your vpn solution
  # openvpn_connect
  # wireguard_connect

  # add some session commands below (keyboard configurations, mounts...)
}

#######################################
# Called every time terminal is opened
#######################################
shell_start(){
  # print a cactus
  echo -e "\U1f335";
  # add some shell commands below
}

#######################################
# Set up a random OpenVPN connection
#######################################
openvpn_connect(){
  # put your openvpn login file in the path below
  local openvpn_path="/etc/openvpn"
  # put your openvpn configurations in the path below
  local config_path="${openvpn_path}/confs"
  declare -a options_array
  options_array=($(sudo ls "${config_path}")) 

  # get a random domain
  local connexion_domain=$(shuffle_domains "${options_array[@]}")
  local config_arg="--config ${config_path}/${connexion_domain}"
  local login_arg="--auth-user-pass ${openvpn_path}/login.conf"

  # connect to vpn
  sudo openvpn ${config_arg} ${login_arg}
}

#######################################
# Set up a random wireguard connection
#######################################
wireguard_connect(){
  # put your wireguard configurations in the path below
  local config_path="/etc/wireguard/confs"
  declare -a options_array
  options_array=($(sudo ls "${config_path}")) 

  # get a random domain
  local connection_domain=$(shuffle_domains "${options_array[@]}")
  
  # connect to vpn
  wg-quick up "${options_path}/${connection_domain}"
}

#######################################
# Return a random array value
# Argument:
#   $1 # an array of vpn files
#######################################
shuffle_domains(){
  local -a opt_arr=("$@")
  local options_length=$(echo ${#opt_arr[@]})
  local random_num=$RANDOM
 
  # provide a number between 0 and options_length
  local random_index=$(echo $((0 + ${random_num} % ${options_length})))

  # return the corresponding indexed array reference
  echo ${opt_arr[${random_index}]}
}
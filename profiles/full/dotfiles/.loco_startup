#!/bin/bash
#-------------------------------------------------------------------------------
# .loco_startup | Effort to provide startup custom commands
#-------------------------------------------------------------------------------

# Below scripts provide functions to trigger commands, when terminal is open.
# Previously, writing a persistent ENV variable was possible
# Previously, writing a file in the system through .profile at startup was possible (as in POSIX compliance), which is limited in VMs
# Nowadays, the inital check is made upon VPN connection

# To set this up properly
# 1. in `is_started` change "VPN_identifier"
# 2. in `wireguard_connect` change "VPN_domains"
# 3. Enjoy !

#######################################
# Called from .bashrc ; checks if VPN is connected
# note : change "VPN_identifier" for your VPN identifier 
# (something that distinguishes it in ```ip addr show```)
#######################################
is_started(){
  local vpn_identifier="VPN_identifier"
  local test=$(ip addr show | grep ${vpn_identifier})
  if [[ -n ${test} ]] ; then
    # started
    shell_start
  else
    # not started
    session_start
    shell_start
  fi
}

#######################################
# Called first time terminal is open
# !if a VPN connection is set properly!
#######################################
session_start(){
  echo -e "Installed with loco.sh \U1f335. You can edit this text in ~/.loco_startup"
  # add some session commands below (keyboard configurations, mounts, vpn...)
}

#######################################
# Called every time terminal is open
#######################################
shell_start(){
  # print a cactus
  echo -e "\U1f335";
  # add some shell commands below
}

#######################################
# Set up a vpn connection
# note: change "VPN_domains" with your 
# vpn domains for random connection
#######################################
vpn_connect(){
  # grep current status
  local vpnStatus=$(vpn status | grep "Status: ")
  declare -a optionsArray
  optionsArray=(VPN_domains)

  # check status
  if [[ "${vpnStatus}" == *"Connected"* ]]; then
    # vpn is connected
    :
  else
    # connect to vpn
    # get a random domain
    local connexionDomain=$(shuffle_domains "${optionsArray[@]}")
    vpn c "${connexionDomain}"
  fi
}

#######################################
# Set up a wireguard connection
# note: change "VPN_domains" with your 
# wireguard domains for random connection
#######################################
wireguard_connect(){
  # grep current status
  local wgStatus=$(wg)
  declare -a optionsArray
  optionsArray=(VPN_domains)

  # check status
  if [[ "${wgStatus}" == "" ]]; then
    # connect to vpn
    # get a random domain
    local connectionDomain=$(shuffle_domains "${optionsArray[@]}")
    wg-quick up ${connectionDomain}
  fi
}

#######################################
# Return a random VPN domain
#######################################
shuffle_domains(){
  local -a opt_arr=("$@")
  local optionsLength=$(echo ${#opt_arr[@]})
  local randomNum=$RANDOM
 
  # provide a number between 1 and optionsLength
  local randomIndex=$(echo $((1 + ${randomNum} % ${optionsLength})))

  # return the corresponding indexed array reference
  echo ${opt_arr[${randomIndex}]}
}